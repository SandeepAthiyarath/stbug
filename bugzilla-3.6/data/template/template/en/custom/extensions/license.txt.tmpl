use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1274253581',
        'name' => 'extensions/license.txt.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
    $output .=  "\n\n";
    $output .=  "\n";
#line 26 "template/en/custom/extensions/license.txt.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n\n# -*- Mode: perl; indent-tabs-mode: nil -*-\n#\n# The contents of this file are subject to the Mozilla Public\n# License Version 1.1 (the \"License\"); you may not use this file\n# except in compliance with the License. You may obtain a copy of\n# the License at http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS\n# IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or\n# implied. See the License for the specific language governing\n# rights and limitations under the License.\n#\n# The Original Code is the ";
#line 40 "template/en/custom/extensions/license.txt.tmpl"
    $output .=  $stash->get('name');
    $output .=  " ";
#line 40 "template/en/custom/extensions/license.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " Extension.\n#\n# The Initial Developer of the Original Code is YOUR NAME\n# Portions created by the Initial Developer are Copyright (C) ";
#line 43 "template/en/custom/extensions/license.txt.tmpl"
    $output .=  $stash->get('year');
    $output .=  " the\n# Initial Developer. All Rights Reserved.\n#\n# Contributor(s):\n#   YOUR NAME <YOUR EMAIL ADDRESS>\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
