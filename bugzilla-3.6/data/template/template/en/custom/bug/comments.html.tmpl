use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1274253581',
        'name' => 'bug/comments.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 23 "template/en/custom/bug/comments.html.tmpl"
    $output .=  $context->process('bug/time.html.tmpl');
    $output .=  "\n\n  <script type=\"text/javascript\">\n  <!--\n  function updateCommentPrivacy(checkbox, id) {\n    var comment_elem = document.getElementById('comment_text_'+id).parentNode;\n    if (checkbox.checked) {\n      if (!comment_elem.className.match('bz_private')) {\n        comment_elem.className = comment_elem.className.concat(' bz_private');\n      }\n    }\n    else {\n      comment_elem.className =\n        comment_elem.className.replace(/(\\s*|^)bz_private(\\s*|\$)/, '\$2');\n    }\n  }\n\n  /* The functions below expand and collapse comments  */\n\n  function toggle_comment_display(link, comment_id) {\n    var comment = document.getElementById('comment_text_' + comment_id);\n    var re = new RegExp(/\\bcollapsed\\b/);\n    if (comment.className.match(re))\n        expand_comment(link, comment);\n    else\n        collapse_comment(link, comment);\n  }\n\n  function toggle_all_comments(action) {\n    var num_comments = ";
#line 52 "template/en/custom/bug/comments.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['comments', 0, 'size', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ";\n\n    // If for some given ID the comment doesn't exist, this doesn't mean\n    // there are no more comments, but that the comment is private and\n    // the user is not allowed to view it.\n\n    for (var id = 0; id < num_comments; id++) {\n        var comment = document.getElementById('comment_text_' + id);\n        if (!comment)\n            continue;\n\n        var link = document.getElementById('comment_link_' + id);\n        if (action == 'collapse')\n            collapse_comment(link, comment);\n        else\n            expand_comment(link, comment);\n    }\n  }\n\n  function collapse_comment(link, comment) {\n    link.innerHTML = \"[+]\";\n    link.title = \"Expand the comment.\";\n    YAHOO.util.Dom.addClass(comment, 'collapsed');\n  }\n\n  function expand_comment(link, comment) {\n    link.innerHTML = \"[-]\";\n    link.title = \"Collapse the comment\";\n    YAHOO.util.Dom.removeClass(comment, 'collapsed');\n  }\n\n  /* This way, we are sure that browsers which do not support JS\n   * won't display this link  */\n\n  function addCollapseLink(count) {\n    document.write(' <a href=\"#\" class=\"bz_collapse_comment\"' +\n                   ' id=\"comment_link_' + count +\n                   '\" onclick=\"toggle_comment_display(this, ' +  count +\n                   '); return false;\" title=\"Collapse the comment.\">[-]<\\/a> ');\n  }\n  //-->\n  </script>\n\n";
#line 96 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('start_at', 0, 1);
    $stash->set('mode', 'show', 1);
#line 97 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('sort_order', $stash->get(['user', 0, 'settings', 0, 'comment_sort_order', 0, 'value', 0]));
    $output .=  "\n\n";
#line 104 "template/en/custom/bug/comments.html.tmpl"
    if (($stash->get('start_at') > 0)) {
#line 103 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('sort_order', 'oldest_to_newest');
    }
    
    $output .=  "\n\n\n";
#line 121 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('sort_order') eq 'oldest_to_newest') {
#line 109 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', 0);
#line 110 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('description', 0);
#line 111 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('increment', 1);
    }
    else {
#line 113 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('increment', -1);
#line 120 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('sort_order') eq 'newest_to_oldest') {
#line 115 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', $stash->get(['comments', 0, 'size', 0]) - 1);
#line 116 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('description', 0);
    }
    elsif ($stash->get('sort_order') eq 'newest_to_oldest_desc_first') {
#line 118 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', $stash->get(['comments', 0, 'size', 0]));
#line 119 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('description', $stash->get(['comments', 0, 'size', 0]));
    }
    
    }
    
    $output .=  "\n\n<!-- This auto-sizes the comments and positions the collapse/expand links \n     to the right. -->\n<table class=\"bz_comment_table\" cellpadding=\"0\" cellspacing=\"0\"><tr>\n<td>\n";
#line 134 "template/en/custom/bug/comments.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('comments');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'comment'} = $_tt_value;
#line 131 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('count') >= $stash->get('start_at')) {
#line 130 "template/en/custom/bug/comments.html.tmpl"
    $output .=  $context->process('a_comment');
    }
    
    $output .=  "\n  ";
#line 133 "template/en/custom/bug/comments.html.tmpl"
    $stash->set('count', $stash->get('count') + $stash->get('increment'));;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n\n";
    $output .=  "  ";
#line 139 "template/en/custom/bug/comments.html.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'aftercomments' ]]);
    $output .=  "\n\n</td>\n<td>";
#line 150 "template/en/custom/bug/comments.html.tmpl"
    if ($stash->get('mode') eq 'edit') {
    $output .=  "\n    <ul class=\"bz_collapse_expand_comments\">\n      <li><a href=\"#\" onclick=\"toggle_all_comments('collapse'); \n                               return false;\">Collapse All Comments</a></li>\n      <li><a href=\"#\" onclick=\"toggle_all_comments('expand');\n                               return false;\">Expand All Comments</a></li>\n    </ul>";
    }
    
    $output .=  "\n</td>\n</tr></table>\n\n";
    $output .=  "\n";
    $output .=  "\n";
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'a_comment' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 159 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['comment', 0, 'is_private', 0]) && ! $stash->get(['user', 0, 'is_insider', 0])) {
        $context->throw('return', '', \$output);
        }
        
        $output .=  "\n\n    <div class=\"bz_comment";
#line 161 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['comment', 0, 'is_private', 0])) {
        $output .=  ' bz_private';
        }
        
#line 162 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['marks', 0, $stash->get('count'), 0])) {
        $output .=  ' bz_comment_hilite';
        }
        
#line 163 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('count') eq $stash->get('description')) {
        $output .=  ' bz_first_comment';
        }
        
        $output .=  "\">";
#line 170 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('count') eq $stash->get('description')) {
#line 165 "template/en/custom/bug/comments.html.tmpl"
        $stash->set('class_name', 'bz_first_comment_head');
#line 166 "template/en/custom/bug/comments.html.tmpl"
        $stash->set('comment_label', 'Description');
        }
        else {
#line 168 "template/en/custom/bug/comments.html.tmpl"
        $stash->set('class_name', 'bz_comment_head');
#line 169 "template/en/custom/bug/comments.html.tmpl"
        $stash->set('comment_label', 'Comment '  . $stash->get('count'));
        }
        
        $output .=  "\n\n      <div class=\"";
#line 172 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('class_name');
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">\n";
#line 181 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('mode') eq 'edit') {
        $output .=  "\n          <span class=\"bz_comment_actions\">\n            <script type=\"text/javascript\"><!--\n              addReplyLink(";
#line 177 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  ", ";
#line 177 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'id', 0]);
        $output .=  ");\n              addCollapseLink(";
#line 178 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "); // -->\n            </script>\n          </span>";
        }
        
        $output .=  "\n";
#line 194 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('mode') eq 'edit' && $stash->get(['user', 0, 'is_insider', 0])) {
        $output .=  "\n          <div class=\"bz_private_checkbox\">\n            <input type=\"hidden\" value=\"1\"\n                   name=\"defined_isprivate_";
#line 186 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'id', 0]);
        $output .=  "\">\n            <input type=\"checkbox\"\n                   name=\"isprivate_";
#line 188 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'id', 0]);
        $output .=  "\" value=\"1\"\n                   id=\"isprivate_";
#line 189 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'id', 0]);
        $output .=  "\"\n                   onClick=\"updateCommentPrivacy(this, ";
#line 190 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  ")\"";
#line 191 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['comment', 0, 'is_private', 0])) {
        $output .=  ('' . " checked=\"checked\"");
        }
        
        $output .=  ">\n            <label for=\"isprivate_";
#line 192 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['comment', 0, 'id', 0]);
        $output .=  "\">Private</label>\n          </div>";
        }
        
        $output .=  "\n\n        <span class=\"bz_comment_number\">\n          <a name=\"c";
#line 197 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\" \n             href=\"show_bug.cgi?id=";
#line 198 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get(['bug', 0, 'bug_id', 0]);
        $output .=  "#c";
#line 198 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $stash->get('count');
        $output .=  "\">";
#line 199 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('comment_label');
            
            &$_tt_filter($output);
        };
        
        $output .=  "</a>\n        </span>\n\n        <span class=\"bz_comment_user\">";
#line 203 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $context->include('global/user.html.tmpl', { 'who' => $stash->get(['comment', 0, 'author', 0]) });
        $output .=  "\n        </span>\n\n        <span class=\"bz_comment_user_images\">";
#line 212 "template/en/custom/bug/comments.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get(['comment', 0, 'author', 0, 'direct_group_membership', 0]);
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'group'} = $_tt_value;
#line 208 "template/en/custom/bug/comments.html.tmpl"
        if (!($stash->get(['group', 0, 'icon_url', 0]))) {
        ($_tt_value, $_tt_error) = $_tt_list->get_next();
        next FOR1;
        
        }
        
        $output .=  "\n            <img src=\"";
#line 209 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['group', 0, 'icon_url', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\"\n                 alt=\"";
#line 210 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['group', 0, 'name', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\"\n                 title=\"";
#line 211 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['group', 0, 'name', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  " - ";
#line 211 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['group', 0, 'description', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">";;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
        $output .=  "\n        </span>\n\n        <span class=\"bz_comment_time\">\n          ";
#line 216 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('time')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'creation_ts', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\n        </span>\n      </div>\n";
#line 225 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get(['user', 0, 'is_timetracker', 0]) && ($stash->get(['comment', 0, 'work_time', 0]) > 0 || $stash->get(['comment', 0, 'work_time', 0]) < 0)) {
        $output .=  "\n         <br>\n         Additional hours worked: ";
#line 224 "template/en/custom/bug/comments.html.tmpl"
        $output .=  $context->process('formattimeunit', { 'time_unit' => $stash->get(['comment', 0, 'work_time', 0]) });
        }
        
        $output .=  "\n\n";
        $output .=  "\n<pre class=\"bz_comment_text\" ";
#line 231 "template/en/custom/bug/comments.html.tmpl"
        if ($stash->get('mode') eq 'edit') {
        $output .=  ' id="comment_text_'  . $stash->get('count')  . '"';
        }
        
        $output .=  ">";
#line 232 "template/en/custom/bug/comments.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('quoteUrls', [ $stash->get('bug'), $stash->get('comment') ])
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comment', 0, 'body_full', [ { 'wrap' => 1  } ]]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "</pre>\n    </div>";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
