use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1274253581',
        'name' => 'request/queue.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 21 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/variables.none.tmpl');
    $output .=  "\n";
#line 23 "template/en/custom/request/queue.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
#line 24 "template/en/custom/request/queue.html.tmpl"
    $stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
    $output .=  "\n";
#line 26 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl', { 'title' => 'Request Queue', 'style' => '
        table.requests th { text-align: left; }
        table#filtering th { text-align: right; }
      ', 'onload' => 'var f = document.request_form; selectProduct(f.product, f.component, null, null, \'Any\');', 'javascript_urls' => [ 'js/productform.js' ] });
    $output .=  "\n\n<script type=\"text/javascript\">\n  var useclassification = false; // No classification level in use\n  var first_load = true; // Is this the first time we load the page?\n  var last_sel = []; // Caches last selection\n  var cpts = new Array();";
#line 41 "template/en/custom/request/queue.html.tmpl"
    $stash->set('n', 1);
#line 52 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['Param', [ 'useclassification' ]])) {
#line 47 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['user', 0, 'get_selectable_classifications', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'clas'} = $_tt_value;
#line 46 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['user', 0, 'get_selectable_products', [ $stash->get(['clas', 0, 'id', 0]) ]]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'prod'} = $_tt_value;
    $output .=  "\n        ";
#line 45 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('js_comp');;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    else {
#line 51 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['user', 0, 'get_selectable_products', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'prod'} = $_tt_value;
    $output .=  "\n      ";
#line 50 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('js_comp');;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    
    $output .=  "\n</script>\n";
    
    $output .=  "\n\n<p>\nWhen you are logged in, only requests made by you or addressed to you\nare shown by default.  You can change the criteria using the form below.\nWhen you are logged out, all pending requests that are not restricted\nto some group are shown by default.\n</p>\n\n<form id=\"request_form\" name=\"request_form\" action=\"request.cgi\" method=\"get\">\n  <input type=\"hidden\" name=\"action\" value=\"queue\">\n\n  <table id=\"filtering\">\n    <tr>\n      <th>Requester:</th>\n      <td><input type=\"text\" name=\"requester\" value=\"";
#line 74 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'requester' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" size=\"20\" \n           title=\"Requester's email address\"></td>\n      <th>Product:</th>\n      <td>\n        <select name=\"product\" onchange=\"selectProduct(this, this.form.component, null, null, 'Any');\">\n          <option value=\"\">Any</option>";
#line 98 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['Param', [ 'useclassification' ]])) {
#line 90 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['user', 0, 'get_selectable_classifications', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'c'} = $_tt_value;
    $output .=  "\n              <optgroup label=\"";
#line 82 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['c', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 88 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['user', 0, 'get_selectable_products', [ $stash->get(['c', 0, 'id', 0]) ]]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'p'} = $_tt_value;
    $output .=  "\n                  <option value=\"";
#line 84 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['p', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\"";
#line 85 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'product' ]]) eq $stash->get(['p', 0, 'name', 0])) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
#line 86 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['p', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n                  </option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n              </optgroup>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    else {
#line 97 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['user', 0, 'get_selectable_products', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'p'} = $_tt_value;
    $output .=  "\n              <option value=\"";
#line 93 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['p', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\"";
#line 94 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'product' ]]) eq $stash->get(['p', 0, 'name', 0])) {
    $output .=  ' selected';
    }
    
    $output .=  ">";
#line 95 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['p', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n              </option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    
    $output .=  "\n        </select>\n      </td>\n      <th>Flag:</th>\n      <td>";
#line 103 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'type', 'options' => $stash->get('types'), 'default' => $stash->get(['cgi', 0, 'param', [ 'type' ]]) });
    $output .=  "\n      </td>\n\n      ";
    $output .=  "\n      <!--\n      <th>Status:</th>\n      <td>\n        ";
    $output .=  "\n      </td>\n      -->\n\n    </tr>\n    <tr>\n      <th>Requestee:</th>\n      <td><input type=\"text\" name=\"requestee\" value=\"";
#line 123 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'requestee' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" size=\"20\" \n           title=\"Requestee's email address or &quot;-&quot; (hyphen) for requests with no requestee\"></td>\n      <th>Component:</th>\n      <td>\n        <select name=\"component\">\n          <option value=\"\">Any</option>";
#line 132 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('components');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'comp'} = $_tt_value;
    $output .=  "\n            <option value=\"";
#line 130 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('comp');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" ";
#line 130 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'component' ]]) eq $stash->get('comp')) {
    $output .=  'selected';
    }
    
    $output .=  ">";
#line 131 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('comp');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</option>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n        </select>\n      </td>\n      <th>Group By:</th>\n      <td>";
#line 137 "template/en/custom/request/queue.html.tmpl"
    $stash->set('groups', { 'Requester' => 'requester', 'Requestee' => 'requestee', 'Flag' => 'type', 'Product/Component' => 'category'  });
#line 143 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/select-menu.html.tmpl', { 'name' => 'group', 'options' => $stash->get('groups'), 'default' => $stash->get(['cgi', 0, 'param', [ 'group' ]]) });
    $output .=  "\n      </td>\n      <td><input type=\"submit\" id=\"filter\" value=\"Filter\"></td>\n    </tr>\n  </table>\n\n</form>\n";
#line 1 "template/en/custom/request/queue.html.tmpl"
    $stash->set('column_headers', { 'type' => 'Flag', 'status' => 'Status', 'bug' => ('' . $stash->get(['terms', 0, 'Bug', 0])), 'attachment' => 'Attachment', 'requester' => 'Requester', 'requestee' => 'Requestee', 'created' => 'Created', 'category' => 'Product/Component'  });
    $output .=  "\n";
#line 161 "template/en/custom/request/queue.html.tmpl"
    $stash->set('display_columns', [ 'requester', 'requestee', 'type', 'bug', 'attachment', 'created' ], 1);
    $stash->set('group_field', 'Requestee', 1);
    $stash->set('group_value', '', 1);
    $output .=  "\n";
#line 168 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get('debug')) {
    $output .=  "\n  <p>";
#line 167 "template/en/custom/request/queue.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('query');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</p>";
    }
    
    $output .=  "\n";
#line 190 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['requests', 0, 'size', 0]) eq 0) {
    $output .=  "\n  <p>\n    No requests.\n  </p>";
    }
    else {
#line 188 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('requests');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'request'} = $_tt_value;
#line 180 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get(['request', 0, $stash->get('group_field'), 0]) ne $stash->get('group_value')) {
#line 177 "template/en/custom/request/queue.html.tmpl"
    $stash->set('group_value', $stash->get(['request', 0, $stash->get('group_field'), 0]));
#line 178 "template/en/custom/request/queue.html.tmpl"
    if (!($stash->get(['loop', 0, 'first', 0]))) {
    $output .=  $context->process('display_buglist');
    }
    
#line 179 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('start_new_table');
    }
    
#line 181 "template/en/custom/request/queue.html.tmpl"
    $stash->set(['buglist', 0, $stash->get(['request', 0, 'bug_id', 0]), 0], 1);
    $output .=  "\n    <tr>";
#line 186 "template/en/custom/request/queue.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('display_columns');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
#line 184 "template/en/custom/request/queue.html.tmpl"
    if ($stash->get('column') eq $stash->get('group_field') || $stash->get(['excluded_columns', 0, 'contains', [ $stash->get('column') ]])) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR2;
    
    }
    
    $output .=  "\n        <td>";
#line 1 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process(("display_" . $stash->get('column')));
    $output .=  "</td>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n    </tr>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 189 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('display_buglist');
    }
    
    $output .=  "\n";
#line 192 "template/en/custom/request/queue.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'js_comp' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
        $output .=  "\n  cpts['";
#line 56 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get('n');
        $output .=  "'] = [";
#line 57 "template/en/custom/request/queue.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get(['prod', 0, 'components', 0]);
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'comp'} = $_tt_value;
        $output .=  "'";
#line 57 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('js')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['comp', 0, 'name', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "'";
#line 57 "template/en/custom/request/queue.html.tmpl"
        if (!($stash->get(['loop', 0, 'last', 0]))) {
        $output .=  ', ';
        }
        ;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
        $output .=  "];";
#line 58 "template/en/custom/request/queue.html.tmpl"
        $stash->set('n', $stash->get('n') + 1);
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_type' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 209 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'type', 0]);
            
            &$_tt_filter($output);
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_buglist' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
        $output .=  "\n  </table>";
#line 244 "template/en/custom/request/queue.html.tmpl"
        if (!($stash->get(['buglist', 0, 'keys', 0, 'size', 0]))) {
        next ;
        }
        
        $output .=  "\n  <a href=\"buglist.cgi?bug_id=";
#line 246 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['buglist', 0, 'keys', 0, 'nsort', 0, 'join', [ ',' ]]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">(view as\n  ";
#line 247 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['terms', 0, 'bug', 0]);
        $output .=  " list)</a>";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'start_new_table' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 195 "template/en/custom/request/queue.html.tmpl"
        $stash->set('buglist', {   });
        $output .=  "\n\n  <h3>";
#line 197 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['column_headers', 0, $stash->get('group_field'), 0]);
        $output .=  ": \n    ";
#line 198 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('email')
                      || $context->throw($context->error);
        
        $output .=  ($stash->get(['request', 0, $stash->get('group_field'), 0]) || 'None');
            
            &$_tt_filter($output);
        };
        
            
            &$_tt_filter($output);
        };
        
        $output .=  "</h3>\n  <table class=\"requests\" cellspacing=\"0\" cellpadding=\"4\" border=\"1\">\n    <tr>";
#line 204 "template/en/custom/request/queue.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get('display_columns');
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'column'} = $_tt_value;
#line 202 "template/en/custom/request/queue.html.tmpl"
        if ($stash->get('column') eq $stash->get('group_field') || $stash->get(['excluded_columns', 0, 'contains', [ $stash->get('column') ]])) {
        ($_tt_value, $_tt_error) = $_tt_list->get_next();
        next FOR1;
        
        }
        
        $output .=  "\n        <th>";
#line 203 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['column_headers', 0, $stash->get('column'), 0]);
        $output .=  "</th>";;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
        $output .=  "\n    </tr>";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_bug' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
        $output .=  "\n  <a href=\"show_bug.cgi?id=";
#line 217 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'bug_id', 0]);
        $output .=  "\">";
#line 218 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'bug_id', 0]);
        $output .=  ": ";
#line 218 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'bug_summary', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "</a>";
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_status' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 213 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'status', 0]);
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_requester' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 235 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('email')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'requester', 0]);
            
            &$_tt_filter($output);
        };
        
            
            &$_tt_filter($output);
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_attachment' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 227 "template/en/custom/request/queue.html.tmpl"
        if ($stash->get(['request', 0, 'attach_id', 0])) {
        $output .=  "\n    <a href=\"attachment.cgi?id=";
#line 223 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'attach_id', 0]);
        $output .=  "&amp;action=edit\">";
#line 224 "template/en/custom/request/queue.html.tmpl"
        $output .=  $stash->get(['request', 0, 'attach_id', 0]);
        $output .=  ": ";
#line 224 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'attach_summary', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "</a>";
        }
        else {
        $output .=  "\n    N/A";
        }
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_requestee' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 231 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('email')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'requestee', 0]);
            
            &$_tt_filter($output);
        };
        
            
            &$_tt_filter($output);
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
        'display_created' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 239 "template/en/custom/request/queue.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('time')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['request', 0, 'created', 0]);
            
            &$_tt_filter($output);
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
