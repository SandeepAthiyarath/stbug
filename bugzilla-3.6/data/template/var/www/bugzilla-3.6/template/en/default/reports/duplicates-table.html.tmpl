use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1265068630',
        'name' => 'reports/duplicates-table.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 39 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $context->process('global/field-descs.none.tmpl');
    $output .=  "\n\n";
    $output .=  "\n";
#line 1 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('columns', [ { 'name' => 'id', 'description' => ($stash->get(['terms', 0, 'Bug', 0]) . " #")  }, { 'name' => 'count', 'description' => 'Dupe<br>Count'  }, { 'name' => 'delta', 'description' => ("Change in last<br>" . $stash->get('changedsince') . " day(s)")  }, { 'name' => 'component', 'description' => $stash->get(['field_descs', 0, 'component', 0])  }, { 'name' => 'bug_severity', 'description' => $stash->get(['field_descs', 0, 'bug_severity', 0])  }, { 'name' => 'op_sys', 'description' => $stash->get(['field_descs', 0, 'op_sys', 0])  }, { 'name' => 'target_milestone', 'description' => $stash->get(['field_descs', 0, 'target_milestone', 0])  }, { 'name' => 'short_desc', 'description' => $stash->get(['field_descs', 0, 'short_desc', 0])  } ]);
    $output .=  "\n";
#line 55 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('base_args', [ ]);
#line 64 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = [ 'maxrows', 'openonly', 'format', 'sortvisible', 'changedsince', 'product' ];
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'param'} = $_tt_value;
#line 59 "template/en/default/reports/duplicates-table.html.tmpl"
    if (! $stash->get([$stash->get('param'), 0, 'defined', 0])) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR1;
    
    }
    
#line 63 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get($stash->get('param'));
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'value'} = $_tt_value;
#line 61 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # CAPTURE
    $stash->set('filtered_value', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value');
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 1 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['base_args', 0, 'push', [ ($stash->get('param') . "=" . $stash->get('filtered_value')) ]]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 68 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('sortvisible')) {
#line 66 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # CAPTURE
    $stash->set('bug_ids_string', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug_ids', 0, 'nsort', 0, 'join', [ ',' ]]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 1 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['base_args', 0, 'push', [ ("bug_id=" . $stash->get('bug_ids_string')) ]]);
    }
    
#line 69 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('base_args_string', $stash->get(['base_args', 0, 'join', [ '&amp;' ]]));
    $output .=  "\n";
#line 125 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['bugs', 0, 'size', 0])) {
    $output .=  "\n  <table id=\"duplicates_table\" cellpadding=\"0\" cellspacing=\"0\">\n    <thead>\n      <tr>";
#line 92 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('columns');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
#line 81 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['column', 0, 'name', 0]) eq $stash->get('sortby')) {
    $output .=  "\n            ";
#line 80 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set(['column', 0, 'reverse_sort', 0], $stash->get('reverse') ? 0 : 1);
    }
    
    $output .=  "\n          <th class=\"";
#line 82 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['column', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n            <a href=\"duplicates.cgi?sortby=";
#line 83 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['column', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
#line 86 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get(['column', 0, 'reverse_sort', 0, 'defined', 0])) {
    $output .=  "&amp;reverse=";
#line 85 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('url_quote')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['column', 0, 'reverse_sort', 0]);
        
        &$_tt_filter($output);
    };
    
    }
    
#line 89 "template/en/default/reports/duplicates-table.html.tmpl"
    if ($stash->get('base_args_string')) {
#line 1 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  ("&amp;" . $stash->get('base_args_string'));
        
        &$_tt_filter($output);
    };
    
    }
    
    $output .=  "\"\n            >";
#line 90 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['column', 0, 'description', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</a>\n          </th>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n      </tr>\n    </thead>\n\n    ";
    $output .=  "\n\n    <tbody>";
#line 120 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('bugs');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'item'} = $_tt_value;
#line 100 "template/en/default/reports/duplicates-table.html.tmpl"
    $stash->set('bug', $stash->get(['item', 0, 'bug', 0]));
    $output .=  "\n        <tr ";
#line 101 "template/en/default/reports/duplicates-table.html.tmpl"
    if (! $stash->get(['bug', 0, 'isopened', 0])) {
    $output .=  ' class=\'resolved\'';
    }
    
    $output .=  ">\n          <td class=\"id\">";
#line 103 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('bug_link', [ $stash->get('bug') ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n          </td>\n          <td class=\"count\">";
#line 105 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['item', 0, 'count', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n          <td class=\"delta\">";
#line 106 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['item', 0, 'delta', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n          <td class=\"component\">";
#line 107 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'component', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n          <td class=\"bug_severity\">";
#line 109 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['display_value', [ 'bug_severity', $stash->get(['bug', 0, 'bug_severity', 0]) ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n          </td>\n          <td class=\"op_sys\">";
#line 112 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['display_value', [ 'op_sys', $stash->get(['bug', 0, 'op_sys', 0]) ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n          </td>\n          <td class=\"target_milestone\">";
#line 115 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['display_value', [ 'target_milestone', $stash->get(['bug', 0, 'target_milestone', 0]) ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n          </td>\n          <td class=\"short_desc\">";
#line 118 "template/en/default/reports/duplicates-table.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'short_desc', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</td>\n        </tr>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n    </tbody>\n  </table>";
    }
    else {
    $output .=  "\n  <h3>No duplicate ";
#line 124 "template/en/default/reports/duplicates-table.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " found.</h3>";
    }
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
