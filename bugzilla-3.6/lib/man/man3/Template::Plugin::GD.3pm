.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Template::Plugin::GD 3"
.TH Template::Plugin::GD 3 "2006-02-03" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Template::Plugin::GD \- GD plugin(s) for the Template Toolkit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    [% USE GD;
.Ve
.PP
.Vb 2
\&       # create an image
\&       img = GD.image(width, height)
.Ve
.PP
.Vb 4
\&       # allocate some colors
\&       black = img.colorAllocate(0,   0,   0);
\&       red   = img.colorAllocate(255, 0,   0);
\&       blue  = img.colorAllocate(0,   0, 255);
.Ve
.PP
.Vb 2
\&       # draw a blue oval
\&       img.arc(50, 50, 95, 75, 0, 360, blue);
.Ve
.PP
.Vb 2
\&       # fill it with red
\&       img.fill(50, 50, red);
.Ve
.PP
.Vb 3
\&       # output binary image in PNG format
\&       img.png | redirect('example.png');
\&    %]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Template-GD distribution provides a number of Template Toolkit
plugin modules to interface with Lincoln Stein's \s-1GD\s0 modules.  These in
turn provide an interface to Thomas Boutell's \s-1GD\s0 graphics library.
.PP
These plugins were distributed as part of the Template Toolkit until
version 2.15 released in February 2006.  At this time they were
extracted into this separate distribution.
.PP
For general information on the Template Toolkit see the documentation
for the Template module or <http://template\-toolkit.org>.  For
information on using plugins, see Template::Plugins and
\&\*(L"\s-1USE\s0\*(R" in Template::Manual::Directives.
.SH "METHODS"
.IX Header "METHODS"
The \s-1GD\s0 plugin module provides a number of methods to create various
other \s-1GD\s0 objects.  But first you need to load the \s-1GD\s0 plugin.
.PP
.Vb 1
\&    [% USE GD %]
.Ve
.PP
Then you can call the following objects against it.
.Sh "image(width, height)"
.IX Subsection "image(width, height)"
Creates a new GD::Image object.
.PP
.Vb 1
\&    [% image = GD.image(100, 200) %]
.Ve
.Sh "\fIpolygon()\fP"
.IX Subsection "polygon()"
Creates a new GD::Polygon object.
.PP
.Vb 6
\&    [% poly = GD.polygon;
\&       poly.addPt(50,0);
\&       poly.addPt(99,99);
\&       poly.addPt(0,99);
\&       image.filledPolygon(poly, blue);
\&    %]
.Ve
.Sh "\fItext()\fP"
.IX Subsection "text()"
Creates a new GD::Text object.
.PP
.Vb 3
\&    [%  text = GD.text;
\&        text.set_text('Some text');
\&    %]
.Ve
.SH "GD PLUGINS"
.IX Header "GD PLUGINS"
These are the \s-1GD\s0 plugins provided in this distribution.  
.Sh "Template::Plugin::GD"
.IX Subsection "Template::Plugin::GD"
Front-end module to the \s-1GD\s0 plugin collection.
.Sh "Template::Plugin::GD::Image"
.IX Subsection "Template::Plugin::GD::Image"
Plugin interface providing direct access to the GD::Image module.
.PP
.Vb 1
\&    [% USE image = GD.Image %]
.Ve
.Sh "Template::Plugin::GD::Polygon"
.IX Subsection "Template::Plugin::GD::Polygon"
Plugin interface providing direct access to the GD::Polygon module.
.PP
.Vb 6
\&    [% USE poly = GD.Polygon;
\&       poly.addPt(50,0);
\&       poly.addPt(99,99);
\&       poly.addPt(0,99);
\&       image.filledPolygon(poly, blue);
\&    %]
.Ve
.Sh "Template::Plugin::GD::Text"
.IX Subsection "Template::Plugin::GD::Text"
Plugin interface providing direct access to the GD::Text module.
.PP
.Vb 3
\&    [%  USE text = GD.Text;
\&        text.set_text('Some text');
\&    %]
.Ve
.Sh "Template::Plugin::GD::Text::Align"
.IX Subsection "Template::Plugin::GD::Text::Align"
Plugin interface to the GD::Text::Align module for creating aligned
text.
.Sh "Template::Plugin::GD::Text::Wrap"
.IX Subsection "Template::Plugin::GD::Text::Wrap"
Plugin interface to the GD::Text::Wrap module for creating wrapped
text.
.Sh "Template::Plugin::GD::Graph::area"
.IX Subsection "Template::Plugin::GD::Graph::area"
Plugin interface to the GD::Graph::area module for creating area graphics
with axes and legends.
.Sh "Template::Plugin::GD::Graph::bars3d"
.IX Subsection "Template::Plugin::GD::Graph::bars3d"
Plugin interface to the GD::Graph::bars3d module for creating 3D bar
graphs with axes and legends.
.Sh "Template::Plugin::GD::Graph::bars"
.IX Subsection "Template::Plugin::GD::Graph::bars"
Plugin interface to the GD::Graph::bars module for creating bar graphs
with axes and legends.
.Sh "Template::Plugin::GD::Graph::lines3d"
.IX Subsection "Template::Plugin::GD::Graph::lines3d"
Plugin interface to the GD::Graph::lines3d module for creating 3D line
graphs with axes and legends.
.Sh "Template::Plugin::GD::Graph::lines"
.IX Subsection "Template::Plugin::GD::Graph::lines"
Plugin interface to the GD::Graph::lines module for creating line
graphs with axes and legends.
.Sh "Template::Plugin::GD::Graph::linespoints"
.IX Subsection "Template::Plugin::GD::Graph::linespoints"
Plugin interface to the GD::Graph::linespoints module for creating
line/point graphs with axes and legends
.Sh "Template::Plugin::GD::Graph::mixed"
.IX Subsection "Template::Plugin::GD::Graph::mixed"
Plugin interface to the GD::Graph::mixed module for creating mixed
graphs with axes and legends.
.Sh "Template::Plugin::GD::Graph::pie3d"
.IX Subsection "Template::Plugin::GD::Graph::pie3d"
Plugin interface to the GD::Graph::pie3d module for creating 3D pie
charts with legends.
.Sh "Template::Plugin::GD::Graph::pie"
.IX Subsection "Template::Plugin::GD::Graph::pie"
Plugin interface to the GD::Graph::pie module for creating pie
charts with legends.
.Sh "Template::Plugin::GD::Graph::points"
.IX Subsection "Template::Plugin::GD::Graph::points"
Plugin interface to the GD::Graph::points module for creating point
graphs with axes and legends 
.Sh "Template::Plugin::GD::Constants"
.IX Subsection "Template::Plugin::GD::Constants"
Provides access to various \s-1GD\s0 constants.
.PP
.Vb 3
\&    [% USE gdc = GD.Constants;
\&       font = gdc.gdLargeFont
\&    %]
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Thomas Boutell wrote the \s-1GD\s0 graphics library.  Lincoln D. Stein wrote
the Perl \s-1GD\s0 modules and Martien Verbruggen wrote the GD::Text and
GD::Graph modules that interface with it.  Craig Barratt wrote the \s-1GD\s0
plugins for the Template Toolkit.  Andy Wardley wrote the Template
Toolkit.  Larry wrote Perl.  Brian and Dennis wrote C.  Dennis and Ken
wrote Unix.  
.SH "VERSION"
.IX Header "VERSION"
This is version 2.66 of the Template::Plugin::GD module set.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2001 Craig Barratt, 2006 Andy Wardley.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Template, Template::Plugins, \s-1GD\s0
