.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JSON::RPC 3"
.TH JSON::RPC 3 "2008-02-24" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
JSON::RPC \- Perl implementation of JSON\-RPC 1.1 protocol
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\& JSON-RPC is a stateless and light-weight remote procedure call (RPC)
\& protocol for inter-networking applications over HTTP. It uses JSON
\& as the data format for of all facets of a remote procedure call,
\& including all application data carried in parameters.
.Ve
.PP
quoted from <http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html>.
.PP
This module was in \s-1JSON\s0 package on \s-1CPAN\s0 before.
Now its interfaces was completely changed.
.PP
The old modules \- JSONRPC::Transport::HTTP and Apache::JSONRPC are deprecated.
Please try to use JSON::RPC::Server and JSON::RPC::Client which support both JSON-RPC
protocol version 1.1 and 1.0.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
\&\s-1CGI\s0 version.
.PP
.Vb 3
\& #--------------------------
\& # In your application class
\& package MyApp;
.Ve
.PP
.Vb 1
\& use base qw(JSON::RPC::Procedure); # Perl 5.6 or more than
.Ve
.PP
.Vb 4
\& sub echo : Public {    # new version style. called by clients
\&     # first argument is JSON::RPC::Server object.
\&     return $_[1];
\& }
.Ve
.PP
.Vb 5
\& sub sum : Public(a:num, b:num) { # sets value into object member a, b.
\&     my ($s, $obj) = @_;
\&     # return a scalar value or a hashref or an arryaref.
\&     return $obj->{a} + $obj->{b};
\& }
.Ve
.PP
.Vb 3
\& sub a_private_method : Private {
\&     # ... can't be called by client
\& }
.Ve
.PP
.Vb 4
\& sub sum_old_style {  # old version style. taken as Public
\&     my ($s, @arg) = @_;
\&    return $arg[0] + $arg[1];
\& }
.Ve
.PP
.Vb 4
\& #--------------------------
\& # In your triger script.
\& use JSON::RPC::Server::CGI;
\& use MyApp;
.Ve
.PP
.Vb 2
\& # simple
\&  JSON::RPC::Server::CGI->dispatch('MyApp')->handle();
.Ve
.PP
.Vb 2
\& # or 
\& JSON::RPC::Server::CGI->dispatch([qw/MyApp FooBar/])->handle();
.Ve
.PP
.Vb 2
\& # or INFO_PATH version
\& JSON::RPC::Server::CGI->dispatch({'/Test' => 'MyApp'})->handle();
.Ve
.PP
.Vb 3
\& #--------------------------
\& # Client
\& use JSON::RPC::Client;
.Ve
.PP
.Vb 1
\& my $client = new JSON::RPC::Client;
.Ve
.PP
.Vb 5
\& my $uri = 'http://www.example.com/jsonrpc/Test';
\& my $obj = {
\&    method  => 'sum', # or 'MyApp.sum'
\&    params  => [10, 20],
\& };
.Ve
.PP
.Vb 1
\& my $res = $client->call( $uri, $obj )
.Ve
.PP
.Vb 11
\& if($res){
\&    if ($res->is_error) {
\&        print "Error : ", $res->error_message;
\&    }
\&    else {
\&        print $res->result;
\&    }
\& }
\& else {
\&    print $client->status_line;
\& }
.Ve
.PP
.Vb 1
\& # or
.Ve
.PP
.Vb 2
\& $client->prepare($uri, ['sum', 'echo']);
\& print $client->sum(10, 23);
.Ve
.PP
See to JSON::RPC::Server::CGI, JSON::RPC::Server::Daemon, JSON::RPC::Server::Apache
JSON::RPC::Client and JSON::RPC::Procedure.
.SH "ABOUT NEW VERSION"
.IX Header "ABOUT NEW VERSION"
.IP "supports JSON-RPC protocol v1.1" 4
.IX Item "supports JSON-RPC protocol v1.1"
.SH "TODO"
.IX Header "TODO"
.PD 0
.IP "Document" 4
.IX Item "Document"
.IP "Examples" 4
.IX Item "Examples"
.IP "More Tests" 4
.IX Item "More Tests"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Makamaka Hannyaharamitu, <makamaka[at]cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2008 by Makamaka Hannyaharamitu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
