.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::ObjectDriver::Driver::Cache::Apache 3"
.TH Data::ObjectDriver::Driver::Cache::Apache 3 "2010-03-22" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Data::ObjectDriver::Driver::Cache::Apache \- object driver for caching objects in Apache\(aqs request space
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyObject;
\&    use base qw( Data::ObjectDriver::BaseObject );
.Ve
.PP
.Vb 10
\&    __PACKAGE__->install_properties({
\&        ...
\&        driver => Data::ObjectDriver::Driver::Cache::Apache->new(
\&            fallback => Data::ObjectDriver::Driver::Cache::Memcached->new(
\&                cache    => Cache::Memcached->new({ servers => \e@MEMCACHED_SERVERS }),
\&                fallback => Data::ObjectDriver::Driver::DBI->new( @$DBI_INFO ),
\&            ),
\&        ),
\&        ...
\&    });
.Ve
.PP
.Vb 1
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIData::ObjectDriver::Driver::Cache::Apache\fR provides automatic caching of
retrieved objects in the per-request memory space of your Apache mod_perl
processes, when used in conjunction with your actual object driver. It can be
used to provide even faster results over memcached when requesting objects that
have already been requested during the same request by some other part of your
application, at the cost of the memory necessary to store the objects.
.PP
If your models can be used in an Apache mod_perl application as well as another
context such as a command line shell, consider replacing the Apache layer of
your caching with a \f(CW\*(C`Data::ObjectDriver::Driver::Cache::RAM\*(C'\fR layer when Apache
is not available. See Data::ObjectDriver::Driver::Cache::Apache.
.SH "USAGE"
.IX Header "USAGE"
.IP "* Data::ObjectDriver::Driver::Cache::Apache\->new(%params)" 4
.IX Item "Data::ObjectDriver::Driver::Cache::Apache->new(%params)"
Required members of \f(CW%params\fR are:
.RS 4
.ie n .IP "* ""fallback""" 4
.el .IP "* \f(CWfallback\fR" 4
.IX Item "fallback"
The \f(CW\*(C`Data::ObjectDriver\*(C'\fR object driver from which to request objects that are
not found in the Apache process cache.
.RE
.RS 4
.RE
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
The Apache driver provides integration with the \f(CW\*(C`Data::ObjectDriver\*(C'\fR debug and
profiling systems. As these systems are designed around \s-1SQL\s0 queries, synthetic
queries are logged to represent caching operations. The operations generated by
this driver are:
.ie n .IP "* ""APACHECACHE_GET ?""" 4
.el .IP "* \f(CWAPACHECACHE_GET ?\fR" 4
.IX Item "APACHECACHE_GET ?"
Retrieve an object. The argument is the cache key for the requested object.
.ie n .IP "* ""APACHECACHE_ADD ?,?""" 4
.el .IP "* \f(CWAPACHECACHE_ADD ?,?\fR" 4
.IX Item "APACHECACHE_ADD ?,?"
Add an object to the cache. The arguments are the cache key for the object and
the flattened representation of the object to cache.
.ie n .IP "* ""APACHECACHE_SET ?,?""" 4
.el .IP "* \f(CWAPACHECACHE_SET ?,?\fR" 4
.IX Item "APACHECACHE_SET ?,?"
Put an object in the cache. The arguments are the cache key for the object and
the flattened representation of the object to cache.
.ie n .IP "* ""APACHECACHE_DELETE ?""" 4
.el .IP "* \f(CWAPACHECACHE_DELETE ?\fR" 4
.IX Item "APACHECACHE_DELETE ?"
Remove an object from the cache. The argument is the cache key for the object
to invalidate.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Apache, Apache2::RequestUtil
.SH "LICENSE"
.IX Header "LICENSE"
\&\fIData::ObjectDriver\fR is free software; you may redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHOR & COPYRIGHT"
.IX Header "AUTHOR & COPYRIGHT"
Except where otherwise noted, \fIData::ObjectDriver\fR is Copyright 2005\-2006
Six Apart, cpan@sixapart.com. All rights reserved.
