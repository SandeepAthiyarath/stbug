.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JSON::RPC::Client 3"
.TH JSON::RPC::Client 3 "2008-02-14" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
JSON::RPC::Client \- Perl implementation of JSON\-RPC client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use JSON::RPC::Client;
.Ve
.PP
.Vb 2
\&   my $client = new JSON::RPC::Client;
\&   my $url    = 'http://www.example.com/jsonrpc/API';
.Ve
.PP
.Vb 4
\&   my $callobj = {
\&      method  => 'sum',
\&      params  => [ 17, 25 ], # ex.) params => { a => 20, b => 10 } for JSON-RPC v1.1
\&   };
.Ve
.PP
.Vb 1
\&   my $res = $client->call($uri, $callobj);
.Ve
.PP
.Vb 11
\&   if($res) {
\&      if ($res->is_error) {
\&          print "Error : ", $res->error_message;
\&      }
\&      else {
\&          print $res->result;
\&      }
\&   }
\&   else {
\&      print $client->status_line;
\&   }
.Ve
.PP
.Vb 1
\&   # Easy access
.Ve
.PP
.Vb 2
\&   $client->prepare($uri, ['sum', 'echo']);
\&   print $client->sum(10, 23);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is JSON-RPC Client.
See <http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html>.
.PP
Gets a perl object and convert to a \s-1JSON\s0 request data.
.PP
Sends the request to a server.
.PP
Gets a response returned by the server.
.PP
Converts the \s-1JSON\s0 response data to the perl object.
.SH "JSON::RPC::Client"
.IX Header "JSON::RPC::Client"
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "$client = JSON::RPC::Client\->new" 4
.IX Item "$client = JSON::RPC::Client->new"
Creates new JSON::RPC::Client object.
.ie n .IP "$response = $client\fR\->call($uri, \f(CW$procedure_object)" 4
.el .IP "$response = \f(CW$client\fR\->call($uri, \f(CW$procedure_object\fR)" 4
.IX Item "$response = $client->call($uri, $procedure_object)"
Calls to \f(CW$uri\fR with \f(CW$procedure_object\fR.
The request method is usually \f(CW\*(C`POST\*(C'\fR.
If \f(CW$uri\fR has query string, method is \f(CW\*(C`GET\*(C'\fR.
.Sp
About '\s-1GET\s0' method,
see to <http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html#GetProcedureCall>.
.Sp
Return value is \*(L"JSON::RPC::ReturnObject\*(R".
.ie n .IP "$client\->prepare($uri, $arrayref_of_procedure)" 4
.el .IP "$client\->prepare($uri, \f(CW$arrayref_of_procedure\fR)" 4
.IX Item "$client->prepare($uri, $arrayref_of_procedure)"
Allow to call methods in contents of \f(CW$arrayref_of_procedure\fR.
Then you can call the prepared methods with an array reference or a list.
.Sp
The return value is a result part of JSON::RPC::ReturnObject.
.Sp
.Vb 1
\&   $client->prepare($uri, ['sum', 'echo']);
.Ve
.Sp
.Vb 1
\&   $res = $client->echo('foobar');  # $res is 'foobar'.
.Ve
.Sp
.Vb 2
\&   $res = $client->sum(10, 20);     # sum up
\&   $res = $client->sum( [10, 20] ); # same as above
.Ve
.Sp
If you call a method which is not prepared, it will \f(CW\*(C`croak\*(C'\fR.
.Sp
Currently, \fBcan't call any method names as same as built-in methods\fR.
.IP "version" 4
.IX Item "version"
Sets the JSON-RPC protocol version.
1.1 by default.
.IP "id" 4
.IX Item "id"
Sets a request identifier.
In JSON-RPC 1.1, it is optoinal.
.Sp
If you set \f(CW\*(C`version\*(C'\fR 1.0 and don't set id,
the module sets 'JSON::RPC::Client' to it.
.IP "ua" 4
.IX Item "ua"
Setter/getter to LWP::UserAgent object.
.IP "json" 4
.IX Item "json"
Setter/getter to the \s-1JSON\s0 coder object.
Default is \s-1JSON\s0, likes this:
.Sp
.Vb 1
\&   $self->json( JSON->new->allow_nonref->utf8 );
.Ve
.Sp
.Vb 1
\&   $json = $self->json;
.Ve
.Sp
This object serializes/deserializes \s-1JSON\s0 data.
By default, returned \s-1JSON\s0 data assumes \s-1UTF\-8\s0 encoded.
.IP "status_line" 4
.IX Item "status_line"
Returns status code;
After \f(CW\*(C`call\*(C'\fR a remote procedure, the status code is set.
.IP "create_json_coder" 4
.IX Item "create_json_coder"
(Class method)
Returns a \s-1JSON\s0 de/encoder in \f(CW\*(C`new\*(C'\fR.
You can override it to use your favorite \s-1JSON\s0 de/encoder.
.SH "JSON::RPC::ReturnObject"
.IX Header "JSON::RPC::ReturnObject"
\&\f(CW\*(C`call\*(C'\fR method or the methods set by \f(CW\*(C`prepared\*(C'\fR returns this object.
(The returned \s-1JSON\s0 data is decoded by the \s-1JSON\s0 coder object which was passed
by the client object.)
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "is_success" 4
.IX Item "is_success"
If the call is successful, returns a true, otherwise a false.
.IP "is_error" 4
.IX Item "is_error"
If the call is not successful, returns a true, otherwise a false.
.IP "error_message" 4
.IX Item "error_message"
If the response contains an error message, returns it.
.IP "result" 4
.IX Item "result"
Returns the result part of a data structure returned by the called server.
.IP "content" 4
.IX Item "content"
Returns the whole data structure returned by the called server.
.IP "jsontext" 4
.IX Item "jsontext"
Returns the row \s-1JSON\s0 data.
.IP "version" 4
.IX Item "version"
Returns the version of this response data.
.SH "JSON::RPC::ServiceObject"
.IX Header "JSON::RPC::ServiceObject"
.SH "RESERVED PROCEDURE"
.IX Header "RESERVED PROCEDURE"
When a client call a procedure (method) name 'system.foobar',
JSON::RPC::Server look up MyApp::system::foobar.
.PP
<http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html#ProcedureCall>
.PP
<http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html#ServiceDescription>
.PP
There is JSON::RPC::Server::system::describe for default response of 'system.describe'.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html>
.PP
<http://json\-rpc.org/wiki/specification>
.SH "AUTHOR"
.IX Header "AUTHOR"
Makamaka Hannyaharamitu, <makamaka[at]cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2008 by Makamaka Hannyaharamitu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
